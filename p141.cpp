#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#define LIM 1000000

int prime[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, \
67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, \
139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, \
223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, \
293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, \
383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, \
463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, \
569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, \
647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, \
743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, \
839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, \
941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, \
1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, \
1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, \
               1187, 1193, 1201, 1213, 1217, 1223};

int factor(int n)
{
    int i = 0;
    int s = 1;

    while (n>1 && i<200) {
        int c = 0;
        while (n%prime[i]==0) {
            n /= prime[i];
            ++c;
        }
        if (c%2) s *= prime[i];
        ++i;
    }
    s *= n;

    //printf("%d\n", s);
    return s;
}

__int64 sum = 0;

void g()
{
    for (int r=1; r<LIM; ++r) {
        __int64 s2 = factor(r);
        s2 *= r;

        int s = sqrt(s2);

        for (int q=(r/s+1)*s; q<LIM; q+=s) {

            __int64 q3 = q;
            q3 *= q3;
            q3 *= q;

            __int64 n = q3 / r + r;

            __int64 s = sqrt(n);
            if (s*s == n) {
                //printf("%I64d\n", s);
                if (n <= 1000000000000) sum += n;
            }
        }
    }
}

void f()
{
    for (int q=1; q<LIM; ++q) {
        for (int r=1; r<q; ++r) {
            __int64 q3 = q*q;
            q3 *= q;

            if (q3 % r == 0) {
                __int64 n = q3 / r + r;
                __int64 s = (int)sqrt(n);
                if (n == s*s)
                    printf("%I64d\n", s);
            }
        }
    }
}

int main()
{
    int start = clock();
    g();
    int finish = clock();

    printf("Sum=%I64d\n", sum);
    printf("time:%fms\n", 1000*((float)finish-start)/CLOCKS_PER_SEC);

    return 0;
}
